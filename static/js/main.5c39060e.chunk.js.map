{"version":3,"sources":["Map.js","TripHelpers.js","App.js","reportWebVitals.js","index.js"],"names":["Map","onScriptLoad","bind","map","window","google","maps","document","getElementById","this","props","id","options","onMapLoad","s","createElement","type","src","x","getElementsByTagName","parentNode","insertBefore","addEventListener","e","style","width","height","Component","modeTypes","days","name","App","state","selectedPersonIndex","selectedDayIndex","selectedTripIndex","trips","polylines","index","a","setState","filterTrips","setOptions","normalPolyline_options","focussedPolyline_options","dayId","persons","forEach","item","tripBeginDay","push","polylinePath","lat","parseFloat","fromY","lng","fromX","toY","toX","polyline","Polyline","length","path","setMap","deleteAllPolylines","className","onClick","selectPerson","classnames","selectDay","selectTrip","tripId","trip","tripBeginTime","tripEndDay","tripEndTime","durationTrip","toFixed","distanceInKm","avgSpeedInKph","tripMode","center","zoom","geodesic","strokeColor","strokeOpacity","strokeWeight","icons","icon","SymbolPath","FORWARD_CLOSED_ARROW","offset","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5c39060e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nclass Map extends Component {\n  constructor() {\n    super()\n    this.onScriptLoad = this.onScriptLoad.bind(this)\n  }\n\n  onScriptLoad() {\n    const map = new window.google.maps.Map(\n      document.getElementById(this.props.id),\n      this.props.options\n    );\n    this.props.onMapLoad(map)\n  }\n\n  componentDidMount() {\n    if(!window.google) {\n      let s = document.createElement('script');\n      s.type = 'text/javascript';\n      s.src = `https://maps.google.com/maps/api/js?key=AIzaSyDDsnot3ZEyq6U-JrZXeWvrW8JSUKjkIhM`;\n      let x = document.getElementsByTagName('script')[0];\n      x.parentNode.insertBefore(s, x);\n      // Below is important.\n      //We cannot access google.maps until it's finished loading\n      s.addEventListener('load', e => {\n        this.onScriptLoad()\n      })\n    } else {\n      this.onScriptLoad()\n    }\n  }\n\n  render() {\n    return (\n      <div style={{ width: '100%', height: 400 }} id={this.props.id} />\n    );\n  }\n}\n\nexport default Map\n","\nconst modeTypes = {\n  '-2': 'Undefined',\n  '-1': 'Unknown',\n  '0': 'Bike',\n  '1': 'Car',\n  '2': 'Passenger',\n  '3': 'Pedestrian',\n  '4': 'Public transport',\n  '5': 'Truck',\n  '6': 'Park and ride',\n  '7': 'Taxi',\n  '11': 'Car sharing (station-based)',\n  '12': 'Car sharing (free-floating)',\n  '15': 'E-Scooter',\n  '16': 'Pedelec',\n  '17': 'Bike sharing',\n  '21': 'Ride pooling',\n  '22': 'Ride hailing',\n  '23': 'Premium ride hailing',\n}\n\nexport function getInfoStrings(trip) {\n  return [\n    trip.tripBeginDay + ', ' + trip.tripBeginTime + ' - ' + trip.tripEndDay + ', ' + trip.tripEndTime,\n    parseFloat(trip.durationTrip).toFixed(2) + ' min – ' + parseFloat(trip.distanceInKm).toFixed(2) + ' km – ' + parseFloat(trip.avgSpeedInKph).toFixed(2) + ' km/h',\n    modeTypes[trip.tripMode]\n  ]\n}\n","import React from 'react';\nimport Map from './Map.js';\nimport './App.css';\nimport persons from './output.json';\nimport classnames from 'classnames';\nimport * as TripHelpers from './TripHelpers';\n\nconst days = [\n  { id: 'Mo.', name: 'Monday' },\n  { id: 'Di.', name: 'Tuesday' },\n  { id: 'Mi.', name: 'Wednesday' },\n  { id: 'Do.', name: 'Thursday' },\n  { id: 'Fr.', name: 'Friday' },\n  { id: 'Sa.', name: 'Saturday' },\n  { id: 'So.', name: 'Sunday' },\n]\n\nclass App extends React.Component {\n  state = {\n    selectedPersonIndex: 0,\n    selectedDayIndex: 0,\n    selectedTripIndex: 0,\n    trips: [],\n    polylines: [],\n  }\n\n  async selectPerson(index) {\n    await this.setState({selectedPersonIndex: index, selectedDayIndex: 0})\n    this.filterTrips()\n  }\n\n  async selectDay(index) {\n    await this.setState({selectedDayIndex: index})\n    this.filterTrips()\n  }\n\n  async selectTrip(index) {\n    this.state.polylines[this.state.selectedTripIndex].setOptions(this.normalPolyline_options)\n    this.state.polylines[index].setOptions(this.focussedPolyline_options)\n    await this.setState({selectedTripIndex: index})\n  }\n\n  filterTrips() {\n    const dayId = days[this.state.selectedDayIndex].id;\n\n    let trips = []\n    let polylines = []\n\n    persons[this.state.selectedPersonIndex].trips.forEach((item, index) => {\n      if(item.tripBeginDay == dayId) {\n        trips.push(item)\n\n        const polylinePath = [\n          { lat: parseFloat(item.fromY), lng: parseFloat(item.fromX) },\n          { lat: parseFloat(item.toY), lng: parseFloat(item.toX) },\n        ]\n        const polyline = new window.google.maps.Polyline({\n          ...(polylines.length == 0 ? this.focussedPolyline_options : this.normalPolyline_options),\n          path: polylinePath\n        })\n        polyline.setMap(this.map)\n        polylines.push(polyline)\n      }\n    });\n\n    this.deleteAllPolylines()\n    this.setState({trips, polylines, selectedTripIndex: 0})\n  }\n\n  deleteAllPolylines() {\n    this.state.polylines.forEach((item, index) => {\n      item.setMap(null)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"ListContainer\">\n          <ul className=\"List\">\n            {persons.map((item, index) => {\n              return (\n                <li\n                  onClick={() => this.selectPerson(index)}\n                  className={classnames({'ListItem': true, 'SelectedListItem': index === this.state.selectedPersonIndex})}\n                >\n                  <div className=\"ListItemTitle\"> {'Person ' + item.id} </div>\n                </li>\n              )\n            })}\n\n          </ul>\n\n          <ol className=\"List\">\n            {days.map((item, index) => {\n              return (\n                <li\n                  onClick={() => this.selectDay(index)}\n                  className={classnames({'ListItem': true, 'SelectedListItem': index === this.state.selectedDayIndex})}\n                >\n                  <div className=\"ListItemTitle\"> {item.name} </div>\n                </li>\n              )\n            })}\n          </ol>\n\n          <ol className=\"List\">\n            {this.state.trips.map((item, index) => {\n              return (\n                <li\n                  onClick={() => this.selectTrip(index)}\n                  className={classnames({'ListItem': true, 'SelectedListItem': index === this.state.selectedTripIndex})}\n                >\n                  <div className=\"ListItemTitle\"> {'Trip ' + item.tripId} </div>\n                  {TripHelpers.getInfoStrings(item).map((item, index) => {\n                    return (\n                      <div> {item} </div>\n                    )\n                  })}\n                </li>\n              )\n            })}\n          </ol>\n        </div>\n\n\n\n        <Map\n          id=\"myMap\"\n          options={{\n            center: { lat: 49.10418149775503, lng: 8.385376573099311 },\n            zoom: 12,\n          }}\n          onMapLoad={(map) => {\n            this.map = map\n\n            this.normalPolyline_options = {\n              geodesic: true,\n              strokeColor: '#000000',\n              strokeOpacity: 0.4,\n              strokeWeight: 2,\n              icons: []\n            }\n            this.focussedPolyline_options = {\n              geodesic: true,\n              strokeColor: '#FF0000',\n              strokeOpacity: 1,\n              strokeWeight: 2,\n              icons: [{\n                icon: {path: window.google.maps.SymbolPath.FORWARD_CLOSED_ARROW},\n                offset: '100%'\n              }]\n            }\n\n            this.filterTrips()\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}