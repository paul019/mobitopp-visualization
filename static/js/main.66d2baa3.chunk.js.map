{"version":3,"sources":["Map.js","TripHelpers.js","App.js","reportWebVitals.js","index.js"],"names":["Map","onScriptLoad","bind","map","window","google","maps","document","getElementById","this","props","id","options","onMapLoad","s","createElement","type","src","x","getElementsByTagName","parentNode","insertBefore","addEventListener","e","style","width","height","Component","modeTypes","days","name","App","state","selectedDayIndex","selectedTripIndex","allTrips","selectedTrips","selectedPolylines","data","fileInfo","originalFile","header","slice","forEach","tripData","index","trip","headerItem","distanceInKm","geopoint1","geopoint2","φ1","lat","Math","PI","φ2","Δφ","Δλ","long","a","sin","cos","atan2","sqrt","getDirectDistanceBetweenGeopoints","fromY","fromX","toY","toX","avgSpeedInKph","durationTrip","push","console","log","setState","filterTrips","setOptions","normalPolyline_options","focussedPolyline_options","trips","dayId","item","tripBeginDay","polylinePath","parseFloat","lng","polyline","Polyline","length","path","setMap","deleteAllPolylines","className","cssClass","label","onFileLoaded","onError","inputId","inputName","inputStyle","color","onClick","selectDay","classnames","selectTrip","tripId","tripBeginTime","tripEndDay","tripEndTime","toFixed","tripMode","center","zoom","geodesic","strokeColor","strokeOpacity","strokeWeight","icons","icon","SymbolPath","FORWARD_CLOSED_ARROW","offset","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.66d2baa3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nclass Map extends Component {\n  constructor() {\n    super()\n    this.onScriptLoad = this.onScriptLoad.bind(this)\n  }\n\n  onScriptLoad() {\n    const map = new window.google.maps.Map(\n      document.getElementById(this.props.id),\n      this.props.options\n    );\n    this.props.onMapLoad(map)\n  }\n\n  componentDidMount() {\n    if(!window.google) {\n      let s = document.createElement('script');\n      s.type = 'text/javascript';\n      s.src = `https://maps.google.com/maps/api/js?key=AIzaSyDDsnot3ZEyq6U-JrZXeWvrW8JSUKjkIhM`;\n      let x = document.getElementsByTagName('script')[0];\n      x.parentNode.insertBefore(s, x);\n      // Below is important.\n      //We cannot access google.maps until it's finished loading\n      s.addEventListener('load', e => {\n        this.onScriptLoad()\n      })\n    } else {\n      this.onScriptLoad()\n    }\n  }\n\n  render() {\n    return (\n      <div style={{ width: '100%', height: 400 }} id={this.props.id} />\n    );\n  }\n}\n\nexport default Map\n","\nconst modeTypes = {\n  '-2': 'Undefined',\n  '-1': 'Unknown',\n  '0': 'Bike',\n  '1': 'Car',\n  '2': 'Passenger',\n  '3': 'Pedestrian',\n  '4': 'Public transport',\n  '5': 'Truck',\n  '6': 'Park and ride',\n  '7': 'Taxi',\n  '11': 'Car sharing (station-based)',\n  '12': 'Car sharing (free-floating)',\n  '15': 'E-Scooter',\n  '16': 'Pedelec',\n  '17': 'Bike sharing',\n  '21': 'Ride pooling',\n  '22': 'Ride hailing',\n  '23': 'Premium ride hailing',\n}\n\nexport function getInfoStrings(trip) {\n  return [\n    trip.tripBeginDay + ', ' + trip.tripBeginTime + ' - ' + trip.tripEndDay + ', ' + trip.tripEndTime,\n    parseFloat(trip.durationTrip).toFixed(2) + ' min – ' + parseFloat(trip.distanceInKm).toFixed(2) + ' km – ' + parseFloat(trip.avgSpeedInKph).toFixed(2) + ' km/h',\n    modeTypes[trip.tripMode]\n  ]\n}\n","import React from 'react';\nimport Map from './Map.js';\nimport './App.css';\nimport classnames from 'classnames';\nimport CSVReader from 'react-csv-reader'\nimport * as TripHelpers from './TripHelpers';\n\nconst days = [\n  { id: 'Mo.', name: 'Monday' },\n  { id: 'Di.', name: 'Tuesday' },\n  { id: 'Mi.', name: 'Wednesday' },\n  { id: 'Do.', name: 'Thursday' },\n  { id: 'Fr.', name: 'Friday' },\n  { id: 'Sa.', name: 'Saturday' },\n  { id: 'So.', name: 'Sunday' },\n]\n\nfunction getDirectDistanceBetweenGeopoints(geopoint1, geopoint2) {\n    // Source: https://www.movable-type.co.uk/scripts/latlong.html\n\n    const R = 6371e3; // metres\n    const φ1 = geopoint1.lat * Math.PI/180; // φ, λ in radians\n    const φ2 = geopoint2.lat * Math.PI/180;\n    const Δφ = (geopoint2.lat-geopoint1.lat) * Math.PI/180;\n    const Δλ = (geopoint2.long-geopoint1.long) * Math.PI/180;\n\n    const a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +\n              Math.cos(φ1) * Math.cos(φ2) *\n              Math.sin(Δλ/2) * Math.sin(Δλ/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\n    const d = R * c; // in metres\n\n    return d\n}\n\nclass App extends React.Component {\n  state = {\n    selectedDayIndex: 0,\n    selectedTripIndex: 0,\n\n    allTrips: [],\n    selectedTrips: [],\n    selectedPolylines: [],\n  }\n\n  onFileLoaded(data, fileInfo, originalFile) {\n    let header = data[0]\n    let allTrips = []\n\n    data.slice(1).forEach((tripData, index) => {\n      let trip = {};\n\n      header.forEach((headerItem, index) => {\n        trip[headerItem] = tripData[index]\n      });\n\n      trip.distanceInKm = getDirectDistanceBetweenGeopoints({\n        lat: trip.fromY,\n        long: trip.fromX\n      }, {\n        lat: trip.toY,\n        long: trip.toX\n      })/1000\n      trip.avgSpeedInKph = trip.distanceInKm / trip.durationTrip * 60\n\n      allTrips.push(trip)\n    });\n\n\n    console.log(allTrips)\n    this.setState({ allTrips })\n    this.filterTrips()\n  }\n\n  async selectDay(index) {\n    await this.setState({selectedDayIndex: index})\n    this.filterTrips()\n  }\n\n  async selectTrip(index) {\n    this.state.selectedPolylines[this.state.selectedTripIndex].setOptions(this.normalPolyline_options)\n    this.state.selectedPolylines[index].setOptions(this.focussedPolyline_options)\n    await this.setState({selectedTripIndex: index})\n  }\n\n  filterTrips(trips) {\n    const dayId = days[this.state.selectedDayIndex].id;\n\n    let selectedTrips = []\n    let selectedPolylines = []\n\n    this.state.allTrips.forEach((item, index) => {\n      if(item.tripBeginDay == dayId) {\n        selectedTrips.push(item)\n\n        const polylinePath = [\n          { lat: parseFloat(item.fromY), lng: parseFloat(item.fromX) },\n          { lat: parseFloat(item.toY), lng: parseFloat(item.toX) },\n        ]\n        const polyline = new window.google.maps.Polyline({\n          ...(selectedPolylines.length == 0 ? this.focussedPolyline_options : this.normalPolyline_options),\n          path: polylinePath\n        })\n        polyline.setMap(this.map)\n        selectedPolylines.push(polyline)\n      }\n    });\n\n    this.deleteAllPolylines()\n    this.setState({selectedTrips, selectedPolylines, selectedTripIndex: 0})\n  }\n\n  deleteAllPolylines() {\n    this.state.selectedPolylines.forEach((item, index) => {\n      item.setMap(null)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"ListContainer\">\n          <div className=\"DropzoneContainer\">\n            <CSVReader\n              cssClass=\"csv-reader-input\"\n              label=\"Select the output file from mobitopp for one person here (file format: .csv).\"\n              onFileLoaded={this.onFileLoaded.bind(this)}\n              onError={() => {}}\n              inputId=\"CSV File\"\n              inputName=\"CSV File\"\n              inputStyle={{color: 'red'}}\n            />\n          </div>\n\n          <ol className=\"List\">\n            {days.map((item, index) => {\n              return (\n                <li\n                  key={item.id}\n                  onClick={() => this.selectDay(index)}\n                  className={classnames({'ListItem': true, 'SelectedListItem': index === this.state.selectedDayIndex})}\n                >\n                  <div className=\"ListItemTitle\"> {item.name} </div>\n                </li>\n              )\n            })}\n          </ol>\n\n          <ol className=\"List\">\n            {this.state.selectedTrips.map((item, index) => {\n              return (\n                <li\n                  key={item.tripId}\n                  onClick={() => this.selectTrip(index)}\n                  className={classnames({'ListItem': true, 'SelectedListItem': index === this.state.selectedTripIndex})}\n                >\n                  <div className=\"ListItemTitle\"> {'Trip ' + item.tripId} </div>\n                  {TripHelpers.getInfoStrings(item).map((item, index) => {\n                    return (\n                      <div> {item} </div>\n                    )\n                  })}\n                </li>\n              )\n            })}\n          </ol>\n        </div>\n\n\n\n        <Map\n          id=\"myMap\"\n          options={{\n            center: { lat: 48.8591174, lng: 8.2059096 },\n            zoom: 9,\n          }}\n          onMapLoad={(map) => {\n            this.map = map\n\n            this.normalPolyline_options = {\n              geodesic: true,\n              strokeColor: '#000000',\n              strokeOpacity: 0.4,\n              strokeWeight: 2,\n              icons: []\n            }\n            this.focussedPolyline_options = {\n              geodesic: true,\n              strokeColor: '#FF0000',\n              strokeOpacity: 1,\n              strokeWeight: 2,\n              icons: [{\n                icon: {path: window.google.maps.SymbolPath.FORWARD_CLOSED_ARROW},\n                offset: '100%'\n              }]\n            }\n\n            this.filterTrips()\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}